version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vendorspot-postgres
    environment:
      POSTGRES_DB: vendorspot
      POSTGRES_USER: vendorspot_user
      POSTGRES_PASSWORD: vendorspot_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init:/docker-entrypoint-initdb.d
    networks:
      - vendorspot-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: vendorspot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vendorspot-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: vendorspot-backend
    environment:
      NODE_ENV: development
      PORT: 5000
      DATABASE_URL: postgresql://vendorspot_user:vendorspot_password@postgres:5432/vendorspot
      REDIS_URL: redis://redis:6379
      JWT_SECRET: development-jwt-secret-key
      PAYSTACK_SECRET_KEY: ${PAYSTACK_SECRET_KEY}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME:-vendorspot-digital-products-dev}
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - vendorspot-network
    command: npm run dev

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: vendorspot-frontend
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      REACT_APP_PAYSTACK_PUBLIC_KEY: ${REACT_APP_PAYSTACK_PUBLIC_KEY}
      REACT_APP_S3_BUCKET: ${S3_BUCKET_NAME:-vendorspot-digital-products-dev}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - vendorspot-network
    command: npm run dev

  # Nginx Reverse Proxy (Production-like setup)
  nginx:
    image: nginx:alpine
    container_name: vendorspot-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - frontend
      - backend
    networks:
      - vendorspot-network

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: vendorspot-mailhog
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - vendorspot-network

volumes:
  postgres_data:
  redis_data:

networks:
  vendorspot-network:
    driver: bridge
