generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  phone             String?  @unique
  firstName         String
  lastName          String
  password          String
  isEmailVerified   Boolean  @default(false)
  isPhoneVerified   Boolean  @default(false)
  isTwoFactorEnabled Boolean @default(false)
  twoFactorSecret   String?
  avatar            String?
  dateOfBirth       DateTime?
  gender            Gender?
  address           String?
  city              String?
  state             String?
  country           String   @default("Nigeria")
  postalCode        String?
  role              UserRole @default(CUSTOMER)
  status            UserStatus @default(ACTIVE)
  lastLoginAt       DateTime?
  loginAttempts     Int      @default(0)
  lockedUntil       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  vendor            Vendor?
  orders            Order[]
  reviews           Review[]
  notifications     Notification[]
  wishlist          WishlistItem[]
  cartItems         CartItem[]
  addresses         Address[]
  paymentMethods    PaymentMethod[]
  transactions      Transaction[]
  supportTickets    SupportTicket[]
  messages          Message[]
  sessions          Session[]

  @@map("users")
}

model Vendor {
  id                String   @id @default(cuid())
  userId            String   @unique
  businessName      String
  businessDescription String?
  businessAddress   String?
  businessPhone     String?
  businessEmail     String?
  website           String?
  logo              String?
  banner            String?
  taxId             String?
  bankName          String?
  bankAccountNumber String?
  bankAccountName   String?
  verificationStatus VendorVerificationStatus @default(PENDING)
  verificationDocuments String[]
  rating            Float    @default(0)
  totalSales        Int      @default(0)
  totalProducts     Int      @default(0)
  commissionRate    Float    @default(0.05) // 5% default commission
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  products          Product[]
  orders            Order[]
  withdrawals       Withdrawal[]
  earnings          Earning[]

  @@map("vendors")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

model Product {
  id                String   @id @default(cuid())
  vendorId          String
  categoryId        String
  name              String
  slug              String   @unique
  description       String
  shortDescription  String?
  price             Float
  originalPrice     Float?
  discountPercentage Float?
  isDigital         Boolean  @default(true)
  fileUrl           String?
  fileSize          Int?
  fileType          String?
  previewUrl        String?
  thumbnail         String?
  images            String[]
  tags              String[]
  features          String[]
  requirements      String?
  instructions      String?
  licenseType       LicenseType?
  licenseDuration   Int? // in days
  downloadLimit     Int? // -1 for unlimited
  isActive          Boolean  @default(true)
  isFeatured        Boolean  @default(false)
  isApproved        Boolean  @default(false)
  approvalStatus    ApprovalStatus @default(PENDING)
  rejectionReason   String?
  viewCount         Int      @default(0)
  downloadCount     Int      @default(0)
  rating            Float    @default(0)
  reviewCount       Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  vendor            Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  category          Category @relation(fields: [categoryId], references: [id])
  orderItems        OrderItem[]
  reviews           Review[]
  wishlistItems     WishlistItem[]
  cartItems         CartItem[]

  @@map("products")
}

model Order {
  id                String   @id @default(cuid())
  userId            String
  vendorId          String?
  orderNumber       String   @unique
  status            OrderStatus @default(PENDING)
  subtotal          Float
  tax               Float    @default(0)
  discount          Float    @default(0)
  total             Float
  currency          String   @default("NGN")
  paymentMethod     PaymentMethodType?
  paymentStatus     PaymentStatus @default(PENDING)
  paymentReference  String?
  paymentDate       DateTime?
  deliveryMethod    DeliveryMethod @default(DIGITAL)
  deliveryAddress   String?
  deliveryStatus    DeliveryStatus @default(PENDING)
  deliveryDate      DateTime?
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id])
  vendor            Vendor?  @relation(fields: [vendorId], references: [id])
  items             OrderItem[]
  transactions      Transaction[]
  reviews           Review[]
  earnings          Earning[]

  @@map("orders")
}

model OrderItem {
  id                String   @id @default(cuid())
  orderId           String
  productId         String
  quantity          Int      @default(1)
  price             Float
  total             Float
  downloadUrl       String?
  downloadExpiry    DateTime?
  downloadCount     Int      @default(0)
  maxDownloads      Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  order             Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product           Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Review {
  id                String   @id @default(cuid())
  userId            String
  productId         String
  orderId           String?
  rating            Int
  title             String?
  comment           String?
  isVerified        Boolean  @default(false)
  isApproved        Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id])
  product           Product  @relation(fields: [productId], references: [id])
  order             Order?   @relation(fields: [orderId], references: [id])

  @@unique([userId, productId])
  @@map("reviews")
}

model CartItem {
  id                String   @id @default(cuid())
  userId            String
  productId         String
  quantity          Int      @default(1)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product           Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("cart_items")
}

model WishlistItem {
  id                String   @id @default(cuid())
  userId            String
  productId         String
  createdAt         DateTime @default(now())

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product           Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Address {
  id                String   @id @default(cuid())
  userId            String
  type              AddressType @default(BILLING)
  firstName         String
  lastName          String
  company           String?
  addressLine1      String
  addressLine2      String?
  city              String
  state             String
  postalCode        String?
  country           String   @default("Nigeria")
  phone             String?
  isDefault          Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model PaymentMethod {
  id                String   @id @default(cuid())
  userId            String
  type              PaymentMethodType
  provider          String
  accountNumber     String?
  accountName       String?
  bankName          String?
  cardLast4         String?
  cardBrand         String?
  isDefault          Boolean  @default(false)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

model Transaction {
  id                String   @id @default(cuid())
  userId            String
  orderId           String?
  type              TransactionType
  amount            Float
  currency          String   @default("NGN")
  status            TransactionStatus @default(PENDING)
  reference         String   @unique
  provider          String?
  providerReference String?
  description       String?
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id])
  order             Order?   @relation(fields: [orderId], references: [id])

  @@map("transactions")
}

model Withdrawal {
  id                String   @id @default(cuid())
  vendorId          String
  amount            Float
  currency          String   @default("NGN")
  status            WithdrawalStatus @default(PENDING)
  bankName          String
  bankAccountNumber String
  bankAccountName   String
  reference         String   @unique
  processedAt       DateTime?
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  vendor            Vendor   @relation(fields: [vendorId], references: [id])

  @@map("withdrawals")
}

model Earning {
  id                String   @id @default(cuid())
  vendorId          String
  orderId           String
  amount            Float
  commission        Float
  netAmount         Float
  status            EarningStatus @default(PENDING)
  paidAt            DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  vendor            Vendor   @relation(fields: [vendorId], references: [id])
  order             Order    @relation(fields: [orderId], references: [id])

  @@map("earnings")
}

model Notification {
  id                String   @id @default(cuid())
  userId            String
  type              NotificationType
  title             String
  message           String
  data              Json?
  isRead            Boolean  @default(false)
  readAt            DateTime?
  createdAt         DateTime @default(now())

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model SupportTicket {
  id                String   @id @default(cuid())
  userId            String
  subject           String
  description       String
  priority          TicketPriority @default(MEDIUM)
  status            TicketStatus @default(OPEN)
  category          TicketCategory
  assignedTo        String?
  resolvedAt        DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id])
  messages          Message[]

  @@map("support_tickets")
}

model Message {
  id                String   @id @default(cuid())
  ticketId          String
  userId            String
  content           String
  isFromStaff       Boolean  @default(false)
  attachments       String[]
  createdAt         DateTime @default(now())

  // Relations
  ticket            SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id])

  @@map("messages")
}

model Session {
  id                String   @id @default(cuid())
  userId            String
  token             String   @unique
  expiresAt         DateTime
  ipAddress         String?
  userAgent         String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Enums
enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
  MODERATOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  BANNED
}

enum VendorVerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum LicenseType {
  SINGLE_USE
  MULTIPLE_USE
  UNLIMITED
  TIME_LIMITED
  SUBSCRIPTION
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethodType {
  CARD
  BANK_TRANSFER
  PAYSTACK
  WALLET
}

enum DeliveryMethod {
  DIGITAL
  PHYSICAL
  EMAIL
}

enum DeliveryStatus {
  PENDING
  PROCESSING
  DELIVERED
  FAILED
}

enum TransactionType {
  PAYMENT
  REFUND
  WITHDRAWAL
  COMMISSION
  BONUS
}

enum TransactionStatus {
  PENDING
  SUCCESSFUL
  FAILED
  CANCELLED
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  PROCESSED
  REJECTED
}

enum EarningStatus {
  PENDING
  PAID
  CANCELLED
}

enum NotificationType {
  ORDER_UPDATE
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  PRODUCT_APPROVED
  PRODUCT_REJECTED
  WITHDRAWAL_UPDATE
  SYSTEM_ANNOUNCEMENT
  SECURITY_ALERT
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketCategory {
  TECHNICAL_SUPPORT
  BILLING
  ACCOUNT_ISSUES
  PRODUCT_INQUIRY
  GENERAL
}

enum AddressType {
  BILLING
  SHIPPING
} 